from flask import Flask, request, render_template_string
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import io, base64
from matplotlib.patches import Patch

app = Flask(__name__)
df = pd.read_csv("check.csv")  

HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="th">
<head>
<meta charset="UTF-8">
<title>SRTF Scheduling</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
<style>
body { padding: 30px; background: linear-gradient(#24198a, #5e198a, #9625b0); }
.card { margin-top: 20px; }
img { max-width: 100%; height: auto; background:white; padding:10px; border-radius:8px; }
table { width: 100%; background: linear-gradient(135deg, #d1c4e9, #bbdefb); border-radius: 10px; overflow: hidden; }
table th { background-color: rgba(255,255,255,0.3); text-align: center; }
table td { text-align: center; }
table input { width: 100%; border: none; background: transparent; text-align: center; }
table input:focus { outline: none; background: #bcdbf5; }
</style>
</head>
<body>
<div class="container">
<h1 class="mb-4 text-white">SRTF Scheduling</h1>

<div class="card">
<div class="card-header text-white" style="background: linear-gradient(135deg, #ff9a9e, #fad0c4);">
    แก้ไข Process
</div>
<div class="card-body">
    <form method="post" id="processForm">
        <table class="table table-bordered" id="processTable">
            <thead>
                <tr>{% for col in columns %}<th>{{ col }}</th>{% endfor %}</tr>
            </thead>
            <tbody>
                {% for i in indices %}
                <tr>
                    {% for col in columns %}
                    <td><input type="text" name="{{ col }}_{{ i }}" value="{{ data[i][col] }}"></td>
                    {% endfor %}
                </tr>
                {% endfor %}
            </tbody>
        </table>
        <button type="submit" class="btn" style="background-color: #f1d4ff; color: #000; border: 1px solid #d1aeea;">
            รัน SRTF Scheduling
        </button>
    </form>
</div>
</div>

{% if table %}
<div class="card">
<div class="card-header text-white" style="background: linear-gradient(#2494b3, #63b3c9, #9fe8fc);">ผลลัพธ์ Scheduling</div>
<div class="card-body">{{ table | safe }}</div>
</div>

<div class="card">
<div class="card-header text-white" style="background: linear-gradient(#6f06ba, #ba61fa, #d7a2fc);">
    Gantt Chart
</div>
<div class="card-body"><img src="data:image/png;base64,{{ chart }}"></div>
</div>
{% endif %}
</div>
</body>
</html>
"""

def run_srtf(processes):
    for p in processes:
        p["Remaining"] = p["Burst Time"]
        p["CT"] = p["TAT"] = p["WT"] = 0

    n = len(processes)
    total_time = sum(p["Burst Time"] for p in processes)
    timeline, completed = [], 0

    for time in range(total_time + max(p["Arrival Time"] for p in processes)):
        available = [p for p in processes if p["Arrival Time"] <= time and p["Remaining"] > 0]
        if available:
            current = min(available, key=lambda x: x["Remaining"])
            timeline.append(current["Process"])
            current["Remaining"] -= 1
            if current["Remaining"] == 0:
                current["CT"] = time + 1
                current["TAT"] = current["CT"] - current["Arrival Time"]
                current["WT"] = current["TAT"] - current["Burst Time"]
                completed += 1
            if completed == n:
                break
        else:
            timeline.append("Idle")

    result = pd.DataFrame(processes)[["Process","Burst Time","Arrival Time","CT","TAT","WT"]]


    fixed_colors = {
        "P1": "#c20000", "P2": "#d862d2", "P3": "#2e763a", "P4": "#e2ff93", "P5": "#8B12C2",
        "P6": "#cd8c01", "P7": "#00bfe0", "P8": "#243BC2", "P9": "#66767a", "P10": "#d3a81b",
        "Idle": "lightgrey"
    }
    all_procs = set(timeline) - {"Idle"}
    extra_procs = sorted(all_procs - set(fixed_colors.keys()))
    cmap = cm.get_cmap('tab20', len(extra_procs))
    for i, p in enumerate(extra_procs):
        fixed_colors[p] = cmap(i)

    # วาด Gantt chart
    fig, ax = plt.subplots(figsize=(20,5))
    start = 0
    for proc in timeline:
        ax.barh(0, 1, left=start, color=fixed_colors.get(proc, "lightgrey"))
        start += 1

    ax.set_xlim(0, len(timeline))
    ax.set_yticks([])
    ax.set_xlabel("Time", fontsize=12)
    ax.set_title("Gantt Chart", fontsize=14)

   
    ax.set_xticks(range(0, len(timeline)+1, 5))

    handles = [Patch(color=color, label=proc) for proc, color in fixed_colors.items()]
    ax.legend(handles=handles, bbox_to_anchor=(1.05,1), loc="upper left", fontsize=10)

    buf = io.BytesIO()
    plt.savefig(buf, format="png", facecolor="white", bbox_inches=None)
    buf.seek(0)
    chart = base64.b64encode(buf.getvalue()).decode("utf-8")
    plt.close(fig)

    return result.to_html(index=False, classes="table table-striped table-bordered"), chart

@app.route("/", methods=["GET","POST"])
def index():
    global df
    table, chart = None, None
    if request.method == "POST":
        columns = df.columns.tolist()
        rows = []
        n_rows = len(df)
        for i in range(n_rows):
            row = {}
            for col in columns:
                val = request.form.get(f"{col}_{i}")
                try: val = int(val)
                except: pass
                row[col] = val
            rows.append(row)
        df_new = pd.DataFrame(rows)
        processes = df_new.to_dict("records")
        table, chart = run_srtf(processes)

    return render_template_string(
        HTML_TEMPLATE,
        columns=df.columns,
        data=df.to_dict("records"),
        indices=list(range(len(df))),
        table=table,
        chart=chart
    )

if __name__ == "__main__":
    app.run(debug=True)
 